package com.practice.collections;

import java.util.*;


/*
 * here we are trying to make a collection using arraylist of CUSTOM TYPE
 * that means we are using CUSTOM STUDENT CLASS to make arraylist Generics
 * instead of any predefined class such as Integer, String etc 
 */

/*
 * as we know that Integer, String classes extends the object class 
 * as well as they overrides the { .equals } method internally
 * which is used for other operations too i.e., removeAll() etc\
 * 
 * so in this case, we are using our own CUSTOM CLASS 
 * so we have to overrides the { .equals } method along with hashcode ( these two are autogenerated )
 * only then we will able to use all other methods of ARRAYLIST such as removeAll(), retainAll()
 * 
 * because these methods use { .equals } method internally.
 */


/*
 * here we use the Student class which is present in the same package
 */

public class ArrayListCustomType {

	public static void main(String[] args) {

		ArrayList<Student> studentList1=new ArrayList<Student>(); 
		studentList1.add(new Student("Shubham",1));
		studentList1.add(new Student("Chirag",2));
		studentList1.add(new Student("Vansh",3));
		studentList1.add(new Student("Priyanka",4));
		studentList1.add(new Student("Sakshi",5));
		
		ArrayList<Student> studentList2=new ArrayList<Student>(); 
		studentList2.add(new Student("Parul",6));
		studentList2.add(new Student("Chirag",2));
		studentList2.add(new Student("Rahul",8));
		studentList2.add(new Student("Shivam",9));		
		
		System.out.println("---------------Student list 1------------------ \n");
		
		for(Student list1:studentList1)
		{
			System.out.println(list1);
		}
		
		System.out.println("\n\n-----------------Student list 2----------------\n");
		
		for(Student list2:studentList2)
		{
			System.out.println(list2);
		}
		
		
		studentList1.addAll(studentList2);
		
		System.out.println("\n\n------------Student list 1 after addAll() method {studentList 2}--------------\n");
		
		for(Student list1:studentList1)
		{
			System.out.println(list1);
		}
		
		//----------------------	IMPORTANT	-----------------------------
		
		/*
		 * this below definition is same for retainAll() method and removeAll() method and
		 * all the other methods of ARRAYLIST
		 * 
		 * 	EXCEPT THE addAll() method
		 */
		
		/*
		 * here we try to use removeAll() method over our CUSTOM CLASS (Student)
		 * 
		 * if we use removeAll() method without overrides the { .equals } method 
		 * then it gives the same list i.e., StudentList 1 as it is without removing the StudentList 2
		 * because we didn't overrides the { .equals }
		 * 
		 * 
		 * if we overrides the { .equals } method 
		 * then we can get the exact result which should be come after performing removeAll() method
		 */
		
		/*
		 * removeAll() method
		 */
		
		studentList1.removeAll(studentList2);
					
		System.out.println("\n------------Student list 1 after removeAll() method {studentList 2}--------------\n");
		
		for(Student list1:studentList1)
		{
			System.out.println(list1);
		}
		
		/*
		 * addAll() method
		 */
		
		studentList1.addAll(studentList2);
		
		System.out.println("\n\n------------Student list 1 after addAll() method {studentList 2} again--------------\n");
		
		for(Student list1:studentList1)
		{
			System.out.println(list1);
		}
		
		/*
		 * retainAll() method
		 */
		
		studentList1.retainAll(studentList2);
		
		System.out.println("\n------------Student list 1 after retainAll() method {studentList 2}--------------\n");
		
		for(Student list1:studentList1)
		{
			System.out.println(list1);
		}
		
		
		
		
		//-----------------------------------------------------------------
		
		
	}

}
